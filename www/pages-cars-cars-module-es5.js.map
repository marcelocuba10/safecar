{"version":3,"sources":["webpack:///src/app/pages/cars/cars.page.html","webpack:///src/app/pages/cars/cars-routing.module.ts","webpack:///src/app/pages/cars/cars.module.ts","webpack:///src/app/pages/cars/cars.page.scss","webpack:///src/app/pages/cars/cars.page.ts","webpack:///src/app/services/api.service.ts"],"names":["routes","path","component","CarsPageRoutingModule","imports","forChild","exports","CarsPageModule","declarations","CarsPage","apiService","getCars","subscribe","response","cars","console","log","selector","template","ApiService","http","base_path","urldb","apikey","httpOptions","headers","error","ErrorEvent","message","status","get","pipe","handleError","id","data","post","JSON","stringify","put","providedIn"],"mappings":"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","file":"pages-cars-cars-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"tertiary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-center\\\">Veiculos</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button [routerLink]=\\\"['/detail-car']\\\">\\n        <ion-icon name=\\\"add-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-card *ngFor=\\\"let car of cars\\\">\\n    <center>\\n      <img [routerLink]=\\\"['/detail-car/', car.id]\\\" src=\\\"../../../assets/img/car1.jpg\\\" />\\n    </center>\\n    <ion-card-header>\\n      <ion-card-subtitle>{{ car.anho_fabricacao }}</ion-card-subtitle>\\n      <ion-card-title>{{ car.nome }}</ion-card-title>\\n    </ion-card-header>\\n    <ion-grid>\\n      <ion-row class=\\\"ion-text-center car-subtitle\\\">\\n        <ion-col size=\\\"4\\\">\\n          <ion-icon name=\\\"construct-outline\\\"></ion-icon>\\n          21/02/2021\\n        </ion-col>\\n        <ion-col size=\\\"4\\\">\\n          <ion-icon name=\\\"speedometer-outline\\\"></ion-icon>\\n          {{ car.motorizacao }}\\n        </ion-col>\\n        <ion-col size=\\\"4\\\">\\n          <ion-icon name=\\\"water-outline\\\"></ion-icon>\\n          {{ car.combustivel }}\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n      <ion-item class=\\\"line-card\\\">\\n        <ion-button mode=\\\"ios\\\" [routerLink]=\\\"['/detail-car/', car.id]\\\" fill=\\\"outline\\\" color=\\\"success\\\" size=\\\"small\\\" slot=\\\"end\\\"><ion-icon name=\\\"eye-outline\\\"></ion-icon>Detalhes</ion-button>\\n        <ion-button mode=\\\"ios\\\" [routerLink]=\\\"['/maintenances/']\\\" class=\\\"btn-spa\\\" fill=\\\"outline\\\" color=\\\"warning\\\" size=\\\"small\\\" slot=\\\"end\\\"><ion-icon name=\\\"menu-outline\\\"></ion-icon>Manutenções</ion-button>\\n      </ion-item>\\n  </ion-card>\\n  \\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CarsPage } from './cars.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CarsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CarsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CarsPageRoutingModule } from './cars-routing.module';\n\nimport { CarsPage } from './cars.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CarsPageRoutingModule\n  ],\n  declarations: [CarsPage]\n})\nexport class CarsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NhcnMvY2Fycy5wYWdlLnNjc3MifQ== */\";","import { ApiService } from './../../services/api.service';\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-cars',\n  templateUrl: './cars.page.html',\n  styleUrls: ['./cars.page.scss'],\n})\nexport class CarsPage implements OnInit {\n\n  private cars: any;\n\n  constructor(\n    public apiService: ApiService\n  ) { }\n\n  ngOnInit() {\n    this.apiService.getCars().subscribe(response => {\n        this.cars = response;\n        console.log(this.cars);\n      });\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Cars } from '../models/cars';\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { Workshop } from '../models/workshop';\r\nimport { Expenses } from '../models/expenses';\r\nimport { Maintenance } from '../models/maintenance';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  //private readonly base_path = 'http://localhost:3000/';\r\n  private readonly base_path = \"https://safecarbot.com/api/\";\r\n\r\n  urldb = \"http://www.omdbapi.com\";\r\n  apikey = \"efcc451b\";\r\n\r\n  constructor(public http: HttpClient) { }\r\n\r\n  // Http Options\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  }\r\n\r\n  // Handle API errors\r\n  handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    return throwError(\r\n      'Something bad happened; please try again later.');\r\n  };\r\n\r\n  /*\r\n  searchData(title: string): Observable<any> {\r\n    return this.http.get(this.urldb + `?t=${title}&apikey=${this.apikey}`).pipe(\r\n      map(results => {\r\n        console.log('result:', results);\r\n        results['Search'];\r\n      })\r\n    );\r\n  }\r\n\r\n  getCarByIdKey(id: number) {\r\n    return this.http.get(this.url + `?id=${id}&apikey=${this.apikey}`);\r\n  }\r\n  */\r\n\r\n  //cars\r\n\r\n  public getCars(): Observable<Cars> {\r\n    return this.http.get<Cars>(this.base_path + 'cars').pipe(\r\n      retry(2),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  public getCarById(id): Observable<Cars> {\r\n    return this.http\r\n      .get<Cars>(this.base_path + 'cars/' + id)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public createCar(data): Observable<Cars> {\r\n    return this.http\r\n      .post<Cars>(this.base_path + 'cars', JSON.stringify(data), this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public updateCar(id, data): Observable<Cars> {\r\n    return this.http\r\n      .put<Cars>(this.base_path + 'cars/' + id, JSON.stringify(data), this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public deleteCar(id) {\r\n    return this.http\r\n      .delete<Cars>(this.base_path + '/' + id, this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  //workshops\r\n\r\n  public getWorkshops(): Observable<Workshop> {\r\n    return this.http.get<Workshop>(this.base_path + 'workshops').pipe(\r\n      retry(2),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  public getWorkshopById(id): Observable<Workshop> {\r\n    return this.http\r\n      .get<Workshop>(this.base_path + 'workshops/' + id)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  //expenses\r\n\r\n  public getExpenses(): Observable<Expenses> {\r\n    return this.http.get<Expenses>(this.base_path + 'expenses').pipe(\r\n      retry(2),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  public getExpenseById(id): Observable<Expenses> {\r\n    return this.http\r\n      .get<Expenses>(this.base_path + 'expenses/' + id)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public createExpense(data): Observable<Expenses> {\r\n    return this.http\r\n      .post<Expenses>(this.base_path + 'expenses', JSON.stringify(data), this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public updateExpense(id, data): Observable<Expenses> {\r\n    return this.http\r\n      .put<Expenses>(this.base_path + 'expenses/' + id, JSON.stringify(data), this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public deleteExpense(id) {\r\n    return this.http\r\n      .delete<Expenses>(this.base_path + '/' + id, this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  //Maintenances\r\n\r\n  public getMaintenances(): Observable<Maintenance> {\r\n    return this.http.get<Maintenance>(this.base_path + 'maintenances').pipe(\r\n      retry(2),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  public getMaintenanceById(id): Observable<Maintenance> {\r\n    return this.http\r\n      .get<Maintenance>(this.base_path + 'maintenances/' + id)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public createMaintenance(data): Observable<Maintenance> {\r\n    return this.http\r\n      .post<Maintenance>(this.base_path + 'maintenances', JSON.stringify(data), this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public updateMaintenance(id, data): Observable<Maintenance> {\r\n    return this.http\r\n      .put<Maintenance>(this.base_path + 'maintenances/' + id, JSON.stringify(data), this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n  public deleteMaintenance(id) {\r\n    return this.http\r\n      .delete<Maintenance>(this.base_path + '/' + id, this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n}\r\n"]}